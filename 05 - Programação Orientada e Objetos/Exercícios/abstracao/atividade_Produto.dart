import 'dart:io';

void main() {
  // Solicita o nome do produto ao usu√°rio
  stdout.write('Digite o nome do produto: ');
  String? nome = stdin.readLineSync();

  double? preco;

  // Loop para garantir que o usu√°rio digite um pre√ßo v√°lido
  while (true) {
    stdout.write('Digite o pre√ßo do produto: ');
    String? entrada = stdin.readLineSync();

    // Tenta converter a entrada em n√∫mero decimal (double)
    preco = double.tryParse(entrada ?? '');

    // Verifica se o pre√ßo √© v√°lido (n√£o nulo e positivo)
    if (preco == null || preco < 0) {
      print('‚ùå Erro: Digite um pre√ßo v√°lido (use ponto em vez de v√≠rgula).');
    } else {
      break; // Sai do loop se for v√°lido
    }
  }

  // Cria o produto e mostra os dados formatados
  Produto produto = Produto(nome?.trim().isNotEmpty == true ? nome! : 'Sem nome', preco);
  produto.mostrarDados();
}

// Classe Produto com encapsulamento do atributo _preco
class Produto {
  String nome;
  double _preco = 0.0;

  // Construtor recebe nome e pre√ßo
  Produto(this.nome, double preco) {
    this.preco = preco; // Usa o setter para aplicar valida√ß√£o
  }

  // Getter para obter o valor do pre√ßo
  double get preco => _preco;

  // Setter com valida√ß√£o para evitar pre√ßos negativos
  set preco(double valor) {
    if (valor >= 0) {
      _preco = valor;
    } else {
      print('‚ö†Ô∏è Pre√ßo inv√°lido! Mantendo valor anterior.');
    }
  }

  // Exibe os dados do produto formatados
  void mostrarDados() {
    print('üõí Produto: $nome | üí∞ Pre√ßo: R\$ ${_preco.toStringAsFixed(2)}');
  }
}
